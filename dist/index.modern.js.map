{"version":3,"file":"index.modern.js","sources":["../src/promisifyMethod.ts","../src/webBridge.ts","../src/index.ts","../src/promisifyInvoke.ts","../src/promisifyStorage.ts","../src/version.ts"],"sourcesContent":["function createCounter() {\n  return {\n    current: 0,\n    next() {\n      return ++this.current;\n    },\n  };\n}\n\nfunction createRequestResolver() {\n  type PromiseController = {\n    resolve: (value: any) => any;\n    reject: (reason: any) => any;\n  };\n\n  const counter = createCounter();\n  const promiseControllers: Record<string, PromiseController | null> = {};\n\n  return {\n    add(controller: PromiseController, customId?: number | string): number | string {\n      const id = customId != null ? customId : counter.next();\n      const methodId = id;\n      promiseControllers[methodId] = controller;\n      return methodId;\n    },\n\n    resolve<T>(reqId: number | string, data: T, isSuccess: (data: T) => boolean, error: any) {\n      const requestPromise = promiseControllers[reqId];\n\n      if (requestPromise) {\n        if (isSuccess(error)) {\n          requestPromise.resolve(data);\n        } else {\n          requestPromise.reject(error);\n        }\n\n        promiseControllers[reqId] = null;\n      }\n    },\n  };\n}\n\nfunction promisifyMethod(method, subscribe: (fn: any) => void) {\n  const requestResolver = createRequestResolver();\n\n  subscribe((event) => {\n    if (!event.detail) {\n      return;\n    }\n\n    if ('reqId' in event.detail) {\n      const { reqId, data, error } = event.detail;\n\n      if (reqId) {\n        requestResolver.resolve(reqId, data, (error) => !(error), error);\n      }\n    }\n  });\n\n  return function promisifiedFunc(...args: any[]): Promise<any | void> {\n    return new Promise((resolve, reject) => {\n      const reqId = requestResolver.add({ resolve, reject });\n\n      method(reqId, ...args);\n    });\n  };\n}\n\nexport default promisifyMethod;\n","import type { AituBridge } from './index';\n\nconst AITU_DOMAIN_PARAM = '__aitu-domain'\n\nconst searchParams = new URLSearchParams(window.location.search)\n\nconst aituOrigin = searchParams.get(AITU_DOMAIN_PARAM)\n\ninterface WebBridge {\n    execute(method: keyof AituBridge, reqId: string, ...args: any[] ): void\n    origin: string\n}\n\nlet WebBridge: WebBridge | null = null\n\nif (aituOrigin) {\n    WebBridge = {\n        origin: aituOrigin,\n        execute: (method, reqId, ...args) => {\n            window.top.postMessage({\n                    source: 'aitu-bridge',\n                    method,\n                    reqId,\n                    payload: args,\n                },\n                WebBridge.origin\n            )\n    }\n\n    }\n\n    window.addEventListener('message', event => {\n        if (event.origin === aituOrigin && event.data) {\n            window.dispatchEvent(new CustomEvent('aituEvents', { detail: event.data }));\n        }\n    })\n}\n\nexport default WebBridge\n","import { LIB_VERSION } from './version';\n\nimport promisifyInvoke from './promisifyInvoke';\nimport promisifyStorage from './promisifyStorage';\nimport promisifyMethod from './promisifyMethod';\n\nimport WebBridge from './webBridge';\n\nenum EInvokeRequest {\n  getMe = 'GetMe',\n  getPhone = 'GetPhone',\n  getContacts = 'GetContacts',\n  getUserProfile = 'GetUserProfile',\n  enableNotifications = 'AllowNotifications',\n  disableNotifications = 'DisableNotifications'\n}\n\ntype SetItemType = (keyName: string, keyValue: string) => Promise<void>;\ntype GetItemType = (keyName: string) => Promise<string | null>;\ntype ClearType = () => Promise<void>;\n\ntype HeaderMenuItemClickHandlerType = (id: string) => Promise<void>;\ntype BackArrowClickHandlerType = () => Promise<void>;\n\ninterface GetPhoneResponse {\n  phone: string;\n  sign: string;\n}\n\ninterface GetMeResponse {\n  name: string;\n  lastname: string;\n  id: string;\n  avatar?: string;\n  avatarThumb?: string;\n  sign: string;\n}\n\ninterface ResponseObject {\n  phone?: string;\n  name?: string;\n  lastname?: string;\n}\n\ninterface GetGeoResponse {\n  latitude: number;\n  longitude: number;\n}\n\ninterface GetContactsResponse {\n  contacts: Array<{\n    first_name: string;\n    last_name: string;\n    phone: string;\n  }>;\n  sign: string;\n}\n\ninterface SelectContactResponse {\n  phone: string;\n  name: string;\n  lastname: string;\n}\n\ninterface GetUserProfileResponse {\n  name: string;\n  lastname?: string;\n  phone?: string;\n  avatar?: string;\n  avatarThumb?: string;\n}\n\nconst MAX_HEADER_MENU_ITEMS_COUNT = 3;\n\nexport enum HeaderMenuIcon {\n  Search = \"Search\",\n  ShoppingCart = \"ShoppingCart\",\n  Menu = \"Menu\",\n  Share = \"Share\",\n  Notifications = \"Notifications\",\n  Help = \"Help\",\n  Error = \"Error\",\n  Person = \"Person\",\n  Sort = \"Sort\",\n  Filter = \"Filter\"\n}\n\ninterface HeaderMenuItem {\n  id: string;\n  icon: HeaderMenuIcon;\n  badge?: string;\n}\n\ntype OpenSettingsResponse = 'success' | 'failed';\ntype ShareResponse = 'success' | 'failed';\ntype CopyToClipboardResponse = 'success' | 'failed';\ntype VibrateResponse = 'success' | 'failed';\n// todo: remove duplicates\ntype ResponseType = 'success' | 'failed';\n\ntype BridgeInvoke<T extends EInvokeRequest, R> = (method: T, data?: {}) => Promise<R>;\n\ninterface BridgeStorage {\n  setItem: SetItemType,\n  getItem: GetItemType,\n  clear: ClearType\n}\n\nexport interface AituBridge {\n  version: string;\n  invoke: BridgeInvoke<EInvokeRequest, ResponseObject>;\n  storage: BridgeStorage;\n  getMe: () => Promise<GetMeResponse>;\n  getPhone: () => Promise<GetPhoneResponse>;\n  getContacts: () => Promise<GetContactsResponse>;\n  getGeo: () => Promise<GetGeoResponse>;\n  selectContact: () => Promise<SelectContactResponse>;\n  getQr: () => Promise<string>;\n  getSMSCode: () => Promise<string>;\n  getUserProfile: (userId: string) => Promise<GetUserProfileResponse>;\n  share: (text: string) => Promise<ShareResponse>;\n  setTitle: (text: string) => Promise<ResponseType>;\n  copyToClipboard: (text: string) => Promise<CopyToClipboardResponse>;\n  shareImage: (text: string, image: string) => Promise<ShareResponse>;\n  shareFile: (text: string, filename: string, base64Data: string) => Promise<ShareResponse>;\n  enableNotifications: () => Promise<{}>;\n  disableNotifications: () => Promise<{}>;\n  openSettings: () => Promise<OpenSettingsResponse>;\n  closeApplication: () => Promise<ResponseType>;\n  setShakeHandler: (handler: any) => void;\n  setTabActiveHandler: (handler: (tabname: string) => void) => void;\n  vibrate: (pattern: number[]) => Promise<VibratePattern>;\n  isSupported: () => boolean;\n  supports: (method: string) => boolean;\n  sub: any;\n  enableScreenCapture: () => Promise<{}>;\n  disableScreenCapture: () => Promise<{}>;\n  setHeaderMenuItems: (items: Array<HeaderMenuItem>) => Promise<ResponseType>;\n  setHeaderMenuItemClickHandler: (handler: HeaderMenuItemClickHandlerType) => void;\n  setCustomBackArrowMode: (enabled: boolean) => Promise<ResponseType>;\n  getCustomBackArrowMode: () => Promise<boolean>;\n  setCustomBackArrowVisible: (visible: boolean) => Promise<ResponseType>;\n  setCustomBackArrowOnClickHandler: (handler: BackArrowClickHandlerType) => void;\n}\n\nconst invokeMethod = 'invoke';\nconst storageMethod = 'storage';\nconst getGeoMethod = 'getGeo';\nconst getQrMethod = 'getQr';\nconst getSMSCodeMethod = 'getSMSCode';\nconst selectContactMethod = 'selectContact';\nconst openSettingsMethod = 'openSettings';\nconst closeApplicationMethod = 'closeApplication';\nconst shareMethod = 'share';\nconst setTitleMethod = 'setTitle';\nconst copyToClipboardMethod = 'copyToClipboard';\nconst shareImageMethod = 'shareImage';\nconst shareFileMethod = 'shareFile';\nconst setShakeHandlerMethod = 'setShakeHandler';\nconst vibrateMethod = 'vibrate';\nconst enableScreenCaptureMethod = 'enableScreenCapture';\nconst disableScreenCaptureMethod = 'disableScreenCapture';\nconst setTabActiveHandlerMethod = 'setTabActiveHandler';\nconst setHeaderMenuItemsMethod = 'setHeaderMenuItems';\nconst setHeaderMenuItemClickHandlerMethod = 'setHeaderMenuItemClickHandler';\nconst setCustomBackArrowModeMethod = 'setCustomBackArrowMode';\nconst getCustomBackArrowModeMethod = 'getCustomBackArrowMode';\nconst setCustomBackArrowVisibleMethod = 'setCustomBackArrowVisible';\nconst setCustomBackArrowOnClickHandlerMethod = 'setCustomBackArrowOnClickHandler';\n\nconst android = typeof window !== 'undefined' && (window as any).AndroidBridge;\nconst ios = typeof window !== 'undefined' && (window as any).webkit && (window as any).webkit.messageHandlers;\nconst web = typeof window !== 'undefined' && (window.top !== window) && WebBridge;\n\nconst buildBridge = (): AituBridge => {\n  const subs = [];\n\n  if (typeof window !== 'undefined') {\n    window.addEventListener('aituEvents', (e: any) => {\n      [...subs].map((fn) => fn.call(null, e));\n    })\n  }\n\n  const invoke = (reqId, method, data = {}) => {\n    const isAndroid = android && android[invokeMethod];\n    const isIos = ios && ios[invokeMethod];\n\n    if (isAndroid) {\n      android[invokeMethod](reqId, method, JSON.stringify(data));\n    } else if (isIos) {\n      ios[invokeMethod].postMessage({ reqId, method, data });\n    } else if (web) {\n      web.execute(invokeMethod, reqId, data)\n    } else if (typeof window !== 'undefined') {\n      console.log('--invoke-isUnknown');\n    }\n  };\n\n  const storage = (reqId, method, data = {}) => {\n    const isAndroid = android && android[storageMethod];\n    const isIos = ios && ios[storageMethod];\n\n    if (isAndroid) {\n      android[storageMethod](reqId, method, JSON.stringify(data));\n    } else if (isIos) {\n      ios[storageMethod].postMessage({ reqId, method, data });\n    } else if (web) {\n      web.execute(storageMethod, reqId, { method, data });\n    } else if (typeof window !== 'undefined') {\n      console.log('--storage-isUnknown');\n    }\n  }\n\n  const getGeo = (reqId) => {\n    const isAndroid = android && android[getGeoMethod];\n    const isIos = ios && ios[getGeoMethod];\n\n    if (isAndroid) {\n      android[getGeoMethod](reqId);\n    } else if (isIos) {\n      ios[getGeoMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(getGeoMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--getGeo-isUnknown');\n    }\n  }\n\n  const getQr = (reqId) => {\n    const isAndroid = android && android[getQrMethod];\n    const isIos = ios && ios[getQrMethod];\n\n    if (isAndroid) {\n      android[getQrMethod](reqId);\n    } else if (isIos) {\n      ios[getQrMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(getQrMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--getQr-isUnknown');\n    }\n  }\n\n  const getSMSCode = (reqId) => {\n    const isAndroid = android && android[getSMSCodeMethod];\n    const isIos = ios && ios[getSMSCodeMethod];\n\n    if (isAndroid) {\n      android[getSMSCodeMethod](reqId);\n    } else if (isIos) {\n      ios[getSMSCodeMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(getSMSCodeMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--getSMSCode-isUnknown');\n    }\n  }\n\n  const selectContact = (reqId) => {\n    const isAndroid = android && android[selectContactMethod];\n    const isIos = ios && ios[selectContactMethod];\n\n    if (isAndroid) {\n      android[selectContactMethod](reqId);\n    } else if (isIos) {\n      ios[selectContactMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(selectContactMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--selectContact-isUnknown');\n    }\n  }\n\n  const openSettings = (reqId) => {\n    const isAndroid = android && android[openSettingsMethod];\n    const isIos = ios && ios[openSettingsMethod];\n\n    if (isAndroid) {\n      android[openSettingsMethod](reqId);\n    } else if (isIos) {\n      ios[openSettingsMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(openSettingsMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--openSettings-isUnknown');\n    }\n  }\n\n  const closeApplication = (reqId) => {\n    const isAndroid = android && android[closeApplicationMethod];\n    const isIos = ios && ios[closeApplicationMethod];\n\n    if (isAndroid) {\n      android[closeApplicationMethod](reqId);\n    } else if (isIos) {\n      ios[closeApplicationMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(closeApplicationMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--closeApplication-isUnknown');\n    }\n  }\n\n  const share = (reqId, text) => {\n    const isAndroid = android && android[shareMethod];\n    const isIos = ios && ios[shareMethod];\n\n    if (isAndroid) {\n      android[shareMethod](reqId, text);\n    } else if (isIos) {\n      ios[shareMethod].postMessage({ reqId, text });\n    } else if (web) {\n      web.execute(shareMethod, reqId, { text });\n    } else if (typeof window !== 'undefined') {\n      console.log('--share-isUnknown');\n    }\n  }\n\n  const setTitle = (reqId, text) => {\n    const isAndroid = android && android[setTitleMethod];\n    const isIos = ios && ios[setTitleMethod];\n\n    if (isAndroid) {\n      android[setTitleMethod](reqId, text);\n    } else if (isIos) {\n      ios[setTitleMethod].postMessage({ reqId, text });\n    } else if (web) {\n      web.execute(setTitleMethod, reqId, { text });\n    } else if (typeof window !== 'undefined') {\n      console.log('--setTitle-isUnknown');\n    }\n  }\n\n  const copyToClipboard = (reqId, text) => {\n    const isAndroid = android && android[copyToClipboardMethod];\n    const isIos = ios && ios[copyToClipboardMethod];\n\n    if (isAndroid) {\n      android[copyToClipboardMethod](reqId, text);\n    } else if (isIos) {\n      ios[copyToClipboardMethod].postMessage({ reqId, text });\n    } else if (web) {\n      web.execute(copyToClipboardMethod, reqId, { text });\n    } else if (typeof window !== 'undefined') {\n      console.log('--copyToClipboard-isUnknown');\n    }\n  }\n\n  const enableScreenCapture = (reqId) => {\n    const isAndroid = android && android[enableScreenCaptureMethod];\n    const isIos = ios && ios[enableScreenCaptureMethod];\n\n    if (isAndroid) {\n      android[enableScreenCaptureMethod](reqId);\n    } else if (isIos) {\n      ios[enableScreenCaptureMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(enableScreenCaptureMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--enableScreenCapture-isUnknown');\n    }\n  }\n\n  const disableScreenCapture = (reqId) => {\n    const isAndroid = android && android[disableScreenCaptureMethod];\n    const isIos = ios && ios[disableScreenCaptureMethod];\n\n    if (isAndroid) {\n      android[disableScreenCaptureMethod](reqId);\n    } else if (isIos) {\n      ios[disableScreenCaptureMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(disableScreenCaptureMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--disableScreenCapture-isUnknown');\n    }\n  }\n\n  const shareImage = (reqId, text, image) => {\n    // !!!======================!!!\n    // !!!===== Deprecated =====!!!\n    // !!!======================!!!\n\n    // const isAndroid = android && android[shareImageMethod];\n    // const isIos = ios && ios[shareImageMethod];\n\n    // if (isAndroid) {\n    //   android[shareImageMethod](reqId, text, image);\n    // } else if (isIos) {\n    //   ios[shareImageMethod].postMessage({ reqId, text, image });\n    // } else if (typeof window !== 'undefined') {\n    //   console.log('--shareImage-isWeb');\n    // }\n\n    // new one - fallback to shareFile\n    const isAndroid = android && android[shareFileMethod];\n    const isIos = ios && ios[shareFileMethod];\n\n    // get extension from base64 mime type and merge with name\n    const ext = image.split(';')[0].split('/')[1];\n    const filename = 'image.' + ext;\n    // remove mime type\n    const base64Data = image.substr(image.indexOf(',') + 1);\n\n    if (isAndroid) {\n      android[shareFileMethod](reqId, text, filename, base64Data);\n    } else if (isIos) {\n      ios[shareFileMethod].postMessage({ reqId, text, filename, base64Data });\n    } else if (web) {\n      web.execute(shareFileMethod, reqId, { text, filename, base64Data });\n    } else if (typeof window !== 'undefined') {\n      console.log('--shareFile-isUnknown');\n    }\n  }\n\n  const shareFile = (reqId, text, filename, base64Data) => {\n    const isAndroid = android && android[shareFileMethod];\n    const isIos = ios && ios[shareFileMethod];\n\n    if (isAndroid) {\n      android[shareFileMethod](reqId, text, filename, base64Data);\n    } else if (isIos) {\n      ios[shareFileMethod].postMessage({ reqId, text, filename, base64Data });\n    } else if (web) {\n      web.execute(shareFileMethod, reqId, { text, filename, base64Data });\n    } else if (typeof window !== 'undefined') {\n      console.log('--shareFile-isUnknown');\n    }\n  }\n\n  const enableNotifications = () => invokePromise(EInvokeRequest.enableNotifications);\n\n  const disableNotifications = () => invokePromise(EInvokeRequest.disableNotifications);\n\n  const setShakeHandler = (handler) => {\n    const isAndroid = android && android[setShakeHandlerMethod];\n    const isIos = ios && ios[setShakeHandlerMethod];\n\n    if (isAndroid || isIos || web) {\n      (window as any).onAituBridgeShake = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setShakeHandler-isUnknown');\n    }\n  };\n\n  const setTabActiveHandler = (handler: (tabname: string) => void) => {\n    const isAndroid = android && android[setTabActiveHandlerMethod];\n    const isIos = ios && ios[setTabActiveHandlerMethod];\n\n    if (isAndroid || isIos || web) {\n      (window as any).onAituBridgeTabActive = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setTabActiveHandler-isUnknown');\n    }\n  };\n\n  const vibrate = (reqId, pattern) => {\n    if (\n      !Array.isArray(pattern) ||\n      pattern.some((timing) => timing < 1 || timing !== Math.floor(timing)) ||\n      pattern.reduce((total, timing) => total + timing) > 10000\n    ) {\n      console.error('Pattern should be an array of positive integers no longer than 10000ms total');\n      return;\n    }\n\n    const isAndroid = android && android[vibrateMethod];\n    const isIos = ios && ios[vibrateMethod];\n\n    if (isAndroid) {\n      android[vibrateMethod](reqId, JSON.stringify(pattern));\n    } else if (isIos) {\n      ios[vibrateMethod].postMessage({ reqId, pattern });\n    }  else if (web) {\n      web.execute(vibrateMethod, reqId, { pattern });\n    } else if (typeof window !== 'undefined') {\n      console.log('--vibrate-isUnknown');\n    }\n  }\n\n  const isSupported = () => {\n    const iosSup = ios && (window as any).webkit.messageHandlers.invoke;\n    return Boolean(android || iosSup || web);\n  }\n\n  // TODO: implement web support\n  const supports = (method) =>\n    (android && typeof android[method] === 'function') ||\n    (ios && ios[method] && typeof ios[method].postMessage === 'function') ||\n    (web && typeof web[method] === 'function');\n\n  const sub = (listener: any) => {\n    subs.push(listener);\n  }\n\n  const setHeaderMenuItems = (reqId, items: Array<HeaderMenuItem>) => {\n    if (items.length > MAX_HEADER_MENU_ITEMS_COUNT) {\n      console.error('SetHeaderMenuItems: items count should not be more than ' + MAX_HEADER_MENU_ITEMS_COUNT);\n      return;\n    }\n\n    const isAndroid = android && android[setHeaderMenuItemsMethod];\n    const isIos = ios && ios[setHeaderMenuItemsMethod];\n\n    const itemsJsonArray = JSON.stringify(items);\n\n    if (isAndroid) {\n      android[setHeaderMenuItemsMethod](reqId, itemsJsonArray);\n    } else if (isIos) {\n      ios[setHeaderMenuItemsMethod].postMessage({ reqId, itemsJsonArray });\n    } else if (web) {\n      web.execute(setHeaderMenuItemsMethod, reqId, { itemsJsonArray });\n    } else if (typeof window !== 'undefined') {\n      console.log('--setHeaderMenuItems-isUnknown');\n    }\n  }\n\n  const setHeaderMenuItemClickHandler = (handler: HeaderMenuItemClickHandlerType) => {\n    const isAndroid = android && android[setHeaderMenuItemClickHandlerMethod];\n    const isIos = ios && ios[setHeaderMenuItemClickHandlerMethod];\n\n    if (isAndroid || isIos || web) {\n      (window as any).onAituBridgeHeaderMenuItemClick = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setHeaderMenuItemClickHandler-isUnknown');\n    }\n  }\n\n  const setCustomBackArrowMode = (reqId, enabled: boolean) => {\n    const isAndroid = android && android[setCustomBackArrowModeMethod];\n    const isIos = ios && ios[setCustomBackArrowModeMethod];\n\n    if (isAndroid) {\n      android[setCustomBackArrowModeMethod](reqId, enabled);\n    } else if (isIos) {\n      ios[setCustomBackArrowModeMethod].postMessage({ reqId, enabled });\n    } else if (web) {\n      web.execute(setCustomBackArrowModeMethod, reqId, { enabled });\n    } else if (typeof window !== 'undefined') {\n      console.log('--setCustomBackArrowMode-isUnknown');\n    }\n  }\n\n  const getCustomBackArrowMode = (reqId) => {\n    const isAndroid = android && android[getCustomBackArrowModeMethod];\n    const isIos = ios && ios[getCustomBackArrowModeMethod];\n\n    if (isAndroid) {\n      android[getCustomBackArrowModeMethod](reqId);\n    } else if (isIos) {\n      ios[getCustomBackArrowModeMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(getCustomBackArrowModeMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--getCustomBackArrowMode-isUnknown');\n    }\n  }\n\n  const setCustomBackArrowVisible = (reqId, visible: boolean) => {\n    const isAndroid = android && android[setCustomBackArrowVisibleMethod];\n    const isIos = ios && ios[setCustomBackArrowVisibleMethod];\n\n    if (isAndroid) {\n      android[setCustomBackArrowVisibleMethod](reqId, visible);\n    } else if (isIos) {\n      ios[setCustomBackArrowVisibleMethod].postMessage({ reqId, visible });\n    } else if (web) {\n      web.execute(setCustomBackArrowVisibleMethod, reqId, { visible });\n    } else if (typeof window !== 'undefined') {\n      console.log('--setCustomBackArrowVisible-isUnknown');\n    }\n  }\n\n  const setCustomBackArrowOnClickHandler = (handler: BackArrowClickHandlerType) => {\n    const isAndroid = android && android[setCustomBackArrowOnClickHandlerMethod];\n    const isIos = ios && ios[setCustomBackArrowOnClickHandlerMethod];\n\n    if (isAndroid || isIos || web) {\n      (window as any).onAituBridgeBackArrowClick = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setCustomBackArrowOnClickHandler-isUnknown');\n    }\n  }\n\n  const invokePromise = promisifyInvoke(invoke, sub);\n  const storagePromise = promisifyStorage(storage, sub);\n  const getGeoPromise = promisifyMethod(getGeo, sub);\n  const getQrPromise = promisifyMethod(getQr, sub);\n  const getSMSCodePromise = promisifyMethod(getSMSCode, sub);\n  const selectContactPromise = promisifyMethod(selectContact, sub);\n  const openSettingsPromise = promisifyMethod(openSettings, sub);\n  const closeApplicationPromise = promisifyMethod(closeApplication, sub);\n  const sharePromise = promisifyMethod(share, sub);\n  const setTitlePromise = promisifyMethod(setTitle, sub);\n  const copyToClipboardPromise = promisifyMethod(copyToClipboard, sub);\n  const shareImagePromise = promisifyMethod(shareImage, sub);\n  const shareFilePromise = promisifyMethod(shareFile, sub);\n  const vibratePromise = promisifyMethod(vibrate, sub);\n  const enableScreenCapturePromise = promisifyMethod(enableScreenCapture, sub);\n  const disableScreenCapturePromise = promisifyMethod(disableScreenCapture, sub);\n  const setHeaderMenuItemsPromise = promisifyMethod(setHeaderMenuItems, sub);\n  const setCustomBackArrowModePromise = promisifyMethod(setCustomBackArrowMode, sub);\n  const getCustomBackArrowModePromise = promisifyMethod(getCustomBackArrowMode, sub);\n  const setCustomBackArrowVisiblePromise = promisifyMethod(setCustomBackArrowVisible, sub);\n\n  return {\n    version: String(LIB_VERSION),\n    copyToClipboard: copyToClipboardPromise,\n    invoke: invokePromise,\n    storage: storagePromise,\n    getMe: () => invokePromise(EInvokeRequest.getMe),\n    getPhone: () => invokePromise(EInvokeRequest.getPhone),\n    getContacts: () => invokePromise(EInvokeRequest.getContacts),\n    getGeo: getGeoPromise,\n    getQr: getQrPromise,\n    getSMSCode: getSMSCodePromise,\n    getUserProfile: (id: string) => invokePromise(EInvokeRequest.getUserProfile, { id }),\n    selectContact: selectContactPromise,\n    enableNotifications,\n    disableNotifications,\n    openSettings: openSettingsPromise,\n    closeApplication: closeApplicationPromise,\n    setTitle: setTitlePromise,\n    share: sharePromise,\n    shareImage: shareImagePromise,\n    shareFile: shareFilePromise,\n    setShakeHandler,\n    setTabActiveHandler,\n    vibrate: vibratePromise,\n    isSupported,\n    supports,\n    sub,\n    enableScreenCapture: enableScreenCapturePromise,\n    disableScreenCapture: disableScreenCapturePromise,\n    setHeaderMenuItems: setHeaderMenuItemsPromise,\n    setHeaderMenuItemClickHandler,\n    setCustomBackArrowMode: setCustomBackArrowModePromise,\n    getCustomBackArrowMode: getCustomBackArrowModePromise,\n    setCustomBackArrowVisible: setCustomBackArrowVisiblePromise,\n    setCustomBackArrowOnClickHandler,\n  }\n}\n\nconst bridge = buildBridge();\n\nexport default bridge;\n","function createCounter() {\n  return {\n    current: 0,\n    next() {\n      return ++this.current;\n    },\n  };\n}\n\nfunction createRequestResolver() {\n  type PromiseController = {\n    resolve: (value: any) => any;\n    reject: (reason: any) => any;\n  };\n\n  const counter = createCounter();\n  const promiseControllers: Record<string, PromiseController | null> = {};\n\n  return {\n    add(controller: PromiseController, customId?: number | string): number | string {\n      const id = customId != null ? customId : counter.next();\n      const invokeId = id;\n      promiseControllers[invokeId] = controller;\n      return invokeId;\n    },\n\n    resolve<T>(reqId: number | string, data: T, isSuccess: (data: T) => boolean, error: any) {\n      const requestPromise = promiseControllers[reqId];\n\n      if (requestPromise) {\n        if (isSuccess(error)) {\n          requestPromise.resolve(data);\n        } else {\n          requestPromise.reject(error);\n        }\n\n        promiseControllers[reqId] = null;\n      }\n    },\n  };\n}\n\nfunction promisifyInvoke(invoke, subscribe: (fn: any) => void) {\n  const requestResolver = createRequestResolver();\n\n  subscribe((event) => {\n    if (!event.detail) {\n      return;\n    }\n\n    if ('reqId' in event.detail) {\n      const { reqId, data, error } = event.detail;\n\n      if (reqId) {\n        requestResolver.resolve(reqId, data, (error) => !(error), error);\n      }\n    }\n  });\n\n  return function promisifiedFunc(method: any, props: any = {}): Promise<any | void> {\n    return new Promise((resolve, reject) => {\n      const reqId = requestResolver.add({ resolve, reject }, props.reqId);\n\n      invoke(reqId, method, props);\n    });\n  };\n}\n\nexport default promisifyInvoke;\n","function createCounter() {\n    return {\n      current: 0,\n      next() {\n        return ++this.current;\n      },\n    };\n  }\n  \n  function createRequestResolver() {\n    type PromiseController = {\n      resolve: (value: any) => any;\n      reject: (reason: any) => any;\n    };\n  \n    const counter = createCounter();\n    const promiseControllers: Record<string, PromiseController | null> = {};\n  \n    return {\n      add(controller: PromiseController, customId?: number | string): number | string {\n        const id = customId != null ? customId : counter.next();\n        const storageId = `s${id}`;\n        promiseControllers[storageId] = controller;\n        return storageId;\n      },\n  \n      resolve<T>(reqId: number | string, data: T, isSuccess: (data: T) => boolean, error: any) {\n        const requestPromise = promiseControllers[reqId];\n  \n        if (requestPromise) {\n          if (isSuccess(error)) {\n            requestPromise.resolve(data);\n          } else {\n            requestPromise.reject(error);\n          }\n  \n          promiseControllers[reqId] = null;\n        }\n      },\n    };\n  }\n  \n  function promisifyStorage(storage, subscribe: (fn: any) => void) {\n    const requestResolver = createRequestResolver();\n  \n    subscribe((event) => {\n      if (!event.detail) {\n        return;\n      }\n  \n      if ('reqId' in event.detail) {\n        const { reqId, data, error } = event.detail;\n  \n        if (reqId) {\n          requestResolver.resolve(reqId, data, (error) => !(error), error);\n        }\n      }\n    });\n\n    return {\n      setItem: (keyName: string, keyValue: string): Promise<void> => {\n        return new Promise((resolve, reject) => {\n          const reqId = requestResolver.add({ resolve, reject });\n          storage(reqId, 'setItem', { keyName, keyValue });\n        });\n      },\n      getItem: (keyName: string): Promise<string | null> => {\n        return new Promise((resolve, reject) => {\n          const reqId = requestResolver.add({ resolve, reject });\n          storage(reqId, 'getItem', { keyName });\n        });\n      },\n      clear: (): Promise<void> => {\n        return new Promise((resolve, reject) => {\n          const reqId = requestResolver.add({ resolve, reject });\n          storage(reqId, 'clear', {});\n        });\n      },\n    }\n  }\n  \n  export default promisifyStorage;\n  ","export const LIB_VERSION = \"0.2.20\";\n"],"names":["promisifyMethod","method","subscribe","requestResolver","counter","current","next","this","promiseControllers","add","controller","customId","methodId","resolve","reqId","data","isSuccess","error","requestPromise","reject","createRequestResolver","event","detail","args","Promise","aituOrigin","URLSearchParams","window","location","search","get","WebBridge","origin","execute","top","postMessage","source","payload","addEventListener","dispatchEvent","CustomEvent","EInvokeRequest","HeaderMenuIcon","android","AndroidBridge","ios","webkit","messageHandlers","web","bridge","subs","e","map","fn","call","sub","listener","push","invokePromise","invoke","invokeId","props","isIos","JSON","stringify","console","log","promisifyInvoke","storagePromise","storage","storageId","setItem","keyName","keyValue","getItem","clear","promisifyStorage","getGeoPromise","getQrPromise","getSMSCodePromise","selectContactPromise","openSettingsPromise","closeApplicationPromise","sharePromise","text","setTitlePromise","copyToClipboardPromise","shareImagePromise","image","isAndroid","filename","split","base64Data","substr","indexOf","shareFilePromise","vibratePromise","pattern","Array","isArray","some","timing","Math","floor","reduce","total","enableScreenCapturePromise","disableScreenCapturePromise","setHeaderMenuItemsPromise","items","length","itemsJsonArray","setCustomBackArrowModePromise","enabled","getCustomBackArrowModePromise","setCustomBackArrowVisiblePromise","visible","version","String","copyToClipboard","getMe","getPhone","getContacts","getGeo","getQr","getSMSCode","getUserProfile","id","selectContact","enableNotifications","disableNotifications","openSettings","closeApplication","setTitle","share","shareImage","shareFile","setShakeHandler","handler","onAituBridgeShake","setTabActiveHandler","onAituBridgeTabActive","vibrate","isSupported","iosSup","Boolean","supports","enableScreenCapture","disableScreenCapture","setHeaderMenuItems","setHeaderMenuItemClickHandler","onAituBridgeHeaderMenuItemClick","setCustomBackArrowMode","getCustomBackArrowMode","setCustomBackArrowVisible","setCustomBackArrowOnClickHandler","onAituBridgeBackArrowClick","buildBridge"],"mappings":"AA0CA,SAASA,EAAgBC,EAAQC,GAC/B,MAAMC,EAlCR,WAME,MAAMC,EAdC,CACLC,QAAS,EACTC,OACE,QAASC,KAAKF,UAYZG,EAA+D,GAErE,MAAO,CACLC,IAAIC,EAA+BC,GACjC,MACMC,EADiB,MAAZD,EAAmBA,EAAWP,EAAQE,OAGjD,OADAE,EAAmBI,GAAYF,EACxBE,GAGTC,QAAWC,EAAwBC,EAASC,EAAiCC,GAC3E,MAAMC,EAAiBV,EAAmBM,GAEtCI,IACEF,EAAUC,GACZC,EAAeL,QAAQE,GAEvBG,EAAeC,OAAOF,GAGxBT,EAAmBM,GAAS,QAOVM,GAgBxB,OAdAlB,EAAWmB,IACT,GAAKA,EAAMC,QAIP,UAAWD,EAAMC,OAAQ,CAC3B,MAAMR,MAAEA,EAAFC,KAASA,EAATE,MAAeA,GAAUI,EAAMC,OAEjCR,GACFX,EAAgBU,QAAQC,EAAOC,EAAOE,IAAYA,EAAQA,kBAK7BM,GACjC,WAAWC,QAAQ,CAACX,EAASM,KAC3B,MAAML,EAAQX,EAAgBM,IAAI,CAAEI,QAAAA,EAASM,OAAAA,IAE7ClB,EAAOa,KAAUS,MC7DvB,MAIME,EAFe,IAAIC,gBAAgBC,OAAOC,SAASC,QAEzBC,IAJN,iBAW1B,IAAIC,EAA8B,KAE9BN,IACAM,EAAY,CACRC,OAAQP,EACRQ,QAAS,CAAChC,EAAQa,KAAUS,KACxBI,OAAOO,IAAIC,YAAY,CACfC,OAAQ,cACRnC,OAAAA,EACAa,MAAAA,EACAuB,QAASd,GAEbQ,EAAUC,UAMtBL,OAAOW,iBAAiB,UAAWjB,IAC3BA,EAAMW,SAAWP,GAAcJ,EAAMN,MACrCY,OAAOY,cAAc,IAAIC,YAAY,aAAc,CAAElB,OAAQD,EAAMN,WAK/E,IC9BK0B,EAkEOC,IDpCGX,GC9Bf,SAAKU,GACHA,gBACAA,sBACAA,4BACAA,kCACAA,2CACAA,8CANF,CAAKA,IAAAA,OAkEL,SAAYC,GACVA,kBACAA,8BACAA,cACAA,gBACAA,gCACAA,cACAA,gBACAA,kBACAA,cACAA,kBAVF,CAAYA,IAAAA,OAuEZ,MAyBMC,EAA4B,oBAAXhB,QAA2BA,OAAeiB,cAC3DC,EAAwB,oBAAXlB,QAA2BA,OAAemB,QAAWnB,OAAemB,OAAOC,gBACxFC,EAAwB,oBAAXrB,QAA2BA,OAAOO,MAAQP,QAAWI,EAudlEkB,EArdc,MAClB,MAAMC,EAAO,GAES,oBAAXvB,QACTA,OAAOW,iBAAiB,aAAea,IACrC,IAAID,GAAME,IAAKC,GAAOA,EAAGC,KAAK,KAAMH,MAIxC,MAoTMI,EAAOC,IACXN,EAAKO,KAAKD,IA4FNE,EC9hBR,SAAyBC,EAAQzD,GAC/B,MAAMC,EAlCR,WAME,MAAMC,EAdC,CACLC,QAAS,EACTC,OACE,QAASC,KAAKF,UAYZG,EAA+D,GAErE,MAAO,CACLC,IAAIC,EAA+BC,GACjC,MACMiD,EADiB,MAAZjD,EAAmBA,EAAWP,EAAQE,OAGjD,OADAE,EAAmBoD,GAAYlD,EACxBkD,GAGT/C,QAAWC,EAAwBC,EAASC,EAAiCC,GAC3E,MAAMC,EAAiBV,EAAmBM,GAEtCI,IACEF,EAAUC,GACZC,EAAeL,QAAQE,GAEvBG,EAAeC,OAAOF,GAGxBT,EAAmBM,GAAS,QAOVM,GAgBxB,OAdAlB,EAAWmB,IACT,GAAKA,EAAMC,QAIP,UAAWD,EAAMC,OAAQ,CAC3B,MAAMR,MAAEA,EAAFC,KAASA,EAATE,MAAeA,GAAUI,EAAMC,OAEjCR,GACFX,EAAgBU,QAAQC,EAAOC,EAAOE,IAAYA,EAAQA,eAKhChB,EAAa4D,EAAa,IACxD,WAAWrC,QAAQ,CAACX,EAASM,KD2HhB,EAACL,EAAOb,EAAQc,EAAO,MACpC,MACM+C,EAAQjB,GAAOA,EAAG,OADNF,GAAWA,EAAO,OAIlCA,EAAO,OAAe7B,EAAOb,EAAQ8D,KAAKC,UAAUjD,IAC3C+C,EACTjB,EAAG,OAAeV,YAAY,CAAErB,MAAAA,EAAOb,OAAAA,EAAQc,KAAAA,IACtCiC,EACTA,EAAIf,QA/CW,SA+CWnB,EAAOC,GACN,oBAAXY,QAChBsC,QAAQC,IAAI,uBCnIZP,CAFcxD,EAAgBM,IAAI,CAAEI,QAAAA,EAASM,OAAAA,GAAU0C,EAAM/C,OAE/Cb,EAAQ4D,MDygBJM,CAjZP,EAiZ+BZ,GACxCa,EE/hBN,SAA0BC,EAASnE,GACjC,MAAMC,EAlCR,WAME,MAAMC,EAdC,CACLC,QAAS,EACTC,OACE,QAASC,KAAKF,UAYZG,EAA+D,GAErE,MAAO,CACLC,IAAIC,EAA+BC,GACjC,MACM2D,OADiB,MAAZ3D,EAAmBA,EAAWP,EAAQE,QAGjD,OADAE,EAAmB8D,GAAa5D,EACzB4D,GAGTzD,QAAWC,EAAwBC,EAASC,EAAiCC,GAC3E,MAAMC,EAAiBV,EAAmBM,GAEtCI,IACEF,EAAUC,GACZC,EAAeL,QAAQE,GAEvBG,EAAeC,OAAOF,GAGxBT,EAAmBM,GAAS,QAOVM,GAgBxB,OAdAlB,EAAWmB,IACT,GAAKA,EAAMC,QAIP,UAAWD,EAAMC,OAAQ,CAC3B,MAAMR,MAAEA,EAAFC,KAASA,EAATE,MAAeA,GAAUI,EAAMC,OAEjCR,GACFX,EAAgBU,QAAQC,EAAOC,EAAOE,IAAYA,EAAQA,MAKzD,CACLsD,QAAS,CAACC,EAAiBC,QACdjD,QAAQ,CAACX,EAASM,KAC3B,MAAML,EAAQX,EAAgBM,IAAI,CAAEI,QAAAA,EAASM,OAAAA,IAC7CkD,EAAQvD,EAAO,UAAW,CAAE0D,QAAAA,EAASC,SAAAA,MAGzCC,QAAUF,OACGhD,QAAQ,CAACX,EAASM,KAC3B,MAAML,EAAQX,EAAgBM,IAAI,CAAEI,QAAAA,EAASM,OAAAA,IAC7CkD,EAAQvD,EAAO,UAAW,CAAE0D,QAAAA,MAGhCG,MAAO,QACMnD,QAAQ,CAACX,EAASM,KAC3B,MAAML,EAAQX,EAAgBM,IAAI,CAAEI,QAAAA,EAASM,OAAAA,IAC7CkD,EAAQvD,EAAO,QAAS,OF8fT8D,CAnYP,CAAC9D,EAAOb,EAAQc,EAAO,MACrC,MACM+C,EAAQjB,GAAOA,EAAG,QADNF,GAAWA,EAAO,QAIlCA,EAAO,QAAgB7B,EAAOb,EAAQ8D,KAAKC,UAAUjD,IAC5C+C,EACTjB,EAAG,QAAgBV,YAAY,CAAErB,MAAAA,EAAOb,OAAAA,EAAQc,KAAAA,IACvCiC,EACTA,EAAIf,QA7DY,UA6DWnB,EAAO,CAAEb,OAAAA,EAAQc,KAAAA,IACjB,oBAAXY,QAChBsC,QAAQC,IAAI,wBAwXiCX,GAC3CsB,EAAgB7E,EArXNc,IACd,MACMgD,EAAQjB,GAAOA,EAAG,OADNF,GAAWA,EAAO,OAIlCA,EAAO,OAAe7B,GACbgD,EACTjB,EAAG,OAAeV,YAAY,CAAErB,MAAAA,IACvBkC,EACTA,EAAIf,QA3EW,SA2EWnB,GACC,oBAAXa,QAChBsC,QAAQC,IAAI,uBA0W8BX,GACxCuB,EAAe9E,EAvWNc,IACb,MACMgD,EAAQjB,GAAOA,EAAG,MADNF,GAAWA,EAAO,MAIlCA,EAAO,MAAc7B,GACZgD,EACTjB,EAAG,MAAcV,YAAY,CAAErB,MAAAA,IACtBkC,EACTA,EAAIf,QAzFU,QAyFWnB,GACE,oBAAXa,QAChBsC,QAAQC,IAAI,sBA4V4BX,GACtCwB,EAAoB/E,EAzVNc,IAClB,MACMgD,EAAQjB,GAAOA,EAAG,WADNF,GAAWA,EAAO,WAIlCA,EAAO,WAAmB7B,GACjBgD,EACTjB,EAAG,WAAmBV,YAAY,CAAErB,MAAAA,IAC3BkC,EACTA,EAAIf,QAvGe,aAuGWnB,GACH,oBAAXa,QAChBsC,QAAQC,IAAI,2BA8UsCX,GAChDyB,EAAuBhF,EA3UNc,IACrB,MACMgD,EAAQjB,GAAOA,EAAG,cADNF,GAAWA,EAAO,cAIlCA,EAAO,cAAsB7B,GACpBgD,EACTjB,EAAG,cAAsBV,YAAY,CAAErB,MAAAA,IAC9BkC,EACTA,EAAIf,QArHkB,gBAqHWnB,GACN,oBAAXa,QAChBsC,QAAQC,IAAI,8BAgU4CX,GACtD0B,EAAsBjF,EA7TNc,IACpB,MACMgD,EAAQjB,GAAOA,EAAG,aADNF,GAAWA,EAAO,aAIlCA,EAAO,aAAqB7B,GACnBgD,EACTjB,EAAG,aAAqBV,YAAY,CAAErB,MAAAA,IAC7BkC,EACTA,EAAIf,QAnIiB,eAmIWnB,GACL,oBAAXa,QAChBsC,QAAQC,IAAI,6BAkT0CX,GACpD2B,EAA0BlF,EA/SNc,IACxB,MACMgD,EAAQjB,GAAOA,EAAG,iBADNF,GAAWA,EAAO,iBAIlCA,EAAO,iBAAyB7B,GACvBgD,EACTjB,EAAG,iBAAyBV,YAAY,CAAErB,MAAAA,IACjCkC,EACTA,EAAIf,QAjJqB,mBAiJWnB,GACT,oBAAXa,QAChBsC,QAAQC,IAAI,iCAoSkDX,GAC5D4B,EAAenF,EAjSP,CAACc,EAAOsE,KACpB,MACMtB,EAAQjB,GAAOA,EAAG,MADNF,GAAWA,EAAO,MAIlCA,EAAO,MAAc7B,EAAOsE,GACnBtB,EACTjB,EAAG,MAAcV,YAAY,CAAErB,MAAAA,EAAOsE,KAAAA,IAC7BpC,EACTA,EAAIf,QA/JU,QA+JWnB,EAAO,CAAEsE,KAAAA,IACP,oBAAXzD,QAChBsC,QAAQC,IAAI,sBAsR4BX,GACtC8B,EAAkBrF,EAnRP,CAACc,EAAOsE,KACvB,MACMtB,EAAQjB,GAAOA,EAAG,SADNF,GAAWA,EAAO,SAIlCA,EAAO,SAAiB7B,EAAOsE,GACtBtB,EACTjB,EAAG,SAAiBV,YAAY,CAAErB,MAAAA,EAAOsE,KAAAA,IAChCpC,EACTA,EAAIf,QA7Ka,WA6KWnB,EAAO,CAAEsE,KAAAA,IACV,oBAAXzD,QAChBsC,QAAQC,IAAI,yBAwQkCX,GAC5C+B,EAAyBtF,EArQP,CAACc,EAAOsE,KAC9B,MACMtB,EAAQjB,GAAOA,EAAG,gBADNF,GAAWA,EAAO,gBAIlCA,EAAO,gBAAwB7B,EAAOsE,GAC7BtB,EACTjB,EAAG,gBAAwBV,YAAY,CAAErB,MAAAA,EAAOsE,KAAAA,IACvCpC,EACTA,EAAIf,QA3LoB,kBA2LWnB,EAAO,CAAEsE,KAAAA,IACjB,oBAAXzD,QAChBsC,QAAQC,IAAI,gCA0PgDX,GAC1DgC,EAAoBvF,EAzNP,CAACc,EAAOsE,EAAMI,KAiB/B,MAAMC,EAAY9C,GAAWA,EAAO,UAC9BmB,EAAQjB,GAAOA,EAAG,UAIlB6C,EAAW,SADLF,EAAMG,MAAM,KAAK,GAAGA,MAAM,KAAK,GAGrCC,EAAaJ,EAAMK,OAAOL,EAAMM,QAAQ,KAAO,GAEjDL,EACF9C,EAAO,UAAkB7B,EAAOsE,EAAMM,EAAUE,GACvC9B,EACTjB,EAAG,UAAkBV,YAAY,CAAErB,MAAAA,EAAOsE,KAAAA,EAAMM,SAAAA,EAAUE,WAAAA,IACjD5C,EACTA,EAAIf,QA5Pc,YA4PWnB,EAAO,CAAEsE,KAAAA,EAAMM,SAAAA,EAAUE,WAAAA,IAC3B,oBAAXjE,QAChBsC,QAAQC,IAAI,0BAwLsCX,GAChDwC,EAAmB/F,EArLP,CAACc,EAAOsE,EAAMM,EAAUE,KACxC,MACM9B,EAAQjB,GAAOA,EAAG,UADNF,GAAWA,EAAO,UAIlCA,EAAO,UAAkB7B,EAAOsE,EAAMM,EAAUE,GACvC9B,EACTjB,EAAG,UAAkBV,YAAY,CAAErB,MAAAA,EAAOsE,KAAAA,EAAMM,SAAAA,EAAUE,WAAAA,IACjD5C,EACTA,EAAIf,QA3Qc,YA2QWnB,EAAO,CAAEsE,KAAAA,EAAMM,SAAAA,EAAUE,WAAAA,IAC3B,oBAAXjE,QAChBsC,QAAQC,IAAI,0BA0KoCX,GAC9CyC,EAAiBhG,EA7IP,CAACc,EAAOmF,KACtB,IACGC,MAAMC,QAAQF,IACfA,EAAQG,KAAMC,GAAWA,EAAS,GAAKA,IAAWC,KAAKC,MAAMF,KAC7DJ,EAAQO,OAAO,CAACC,EAAOJ,IAAWI,EAAQJ,GAAU,IAGpD,YADApC,QAAQhD,MAAM,gFAIhB,MACM6C,EAAQjB,GAAOA,EAAG,QADNF,GAAWA,EAAO,QAIlCA,EAAO,QAAgB7B,EAAOiD,KAAKC,UAAUiC,IACpCnC,EACTjB,EAAG,QAAgBV,YAAY,CAAErB,MAAAA,EAAOmF,QAAAA,IAC9BjD,EACVA,EAAIf,QA3TY,UA2TWnB,EAAO,CAAEmF,QAAAA,IACT,oBAAXtE,QAChBsC,QAAQC,IAAI,wBAyHgCX,GAC1CmD,EAA6B1G,EA1PNc,IAC3B,MACMgD,EAAQjB,GAAOA,EAAG,oBADNF,GAAWA,EAAO,oBAIlCA,EAAO,oBAA4B7B,GAC1BgD,EACTjB,EAAG,oBAA4BV,YAAY,CAAErB,MAAAA,IACpCkC,EACTA,EAAIf,QArMwB,sBAqMWnB,GACZ,oBAAXa,QAChBsC,QAAQC,IAAI,oCA+OwDX,GAClEoD,EAA8B3G,EA5ONc,IAC5B,MACMgD,EAAQjB,GAAOA,EAAG,qBADNF,GAAWA,EAAO,qBAIlCA,EAAO,qBAA6B7B,GAC3BgD,EACTjB,EAAG,qBAA6BV,YAAY,CAAErB,MAAAA,IACrCkC,EACTA,EAAIf,QAnNyB,uBAmNWnB,GACb,oBAAXa,QAChBsC,QAAQC,IAAI,qCAiO0DX,GACpEqD,EAA4B5G,EAzGP,CAACc,EAAO+F,KACjC,GAAIA,EAAMC,OAxasB,EA0a9B,YADA7C,QAAQhD,MAAM,6DAIhB,MAAMwE,EAAY9C,GAAWA,EAAO,mBAC9BmB,EAAQjB,GAAOA,EAAG,mBAElBkE,EAAiBhD,KAAKC,UAAU6C,GAElCpB,EACF9C,EAAO,mBAA2B7B,EAAOiG,GAChCjD,EACTjB,EAAG,mBAA2BV,YAAY,CAAErB,MAAAA,EAAOiG,eAAAA,IAC1C/D,EACTA,EAAIf,QA5VuB,qBA4VWnB,EAAO,CAAEiG,eAAAA,IACpB,oBAAXpF,QAChBsC,QAAQC,IAAI,mCAuFsDX,GAChEyD,EAAgChH,EAzEP,CAACc,EAAOmG,KACrC,MACMnD,EAAQjB,GAAOA,EAAG,uBADNF,GAAWA,EAAO,uBAIlCA,EAAO,uBAA+B7B,EAAOmG,GACpCnD,EACTjB,EAAG,uBAA+BV,YAAY,CAAErB,MAAAA,EAAOmG,QAAAA,IAC9CjE,EACTA,EAAIf,QApX2B,yBAoXWnB,EAAO,CAAEmG,QAAAA,IACxB,oBAAXtF,QAChBsC,QAAQC,IAAI,uCA8D8DX,GACxE2D,EAAgClH,EA3DNc,IAC9B,MACMgD,EAAQjB,GAAOA,EAAG,uBADNF,GAAWA,EAAO,uBAIlCA,EAAO,uBAA+B7B,GAC7BgD,EACTjB,EAAG,uBAA+BV,YAAY,CAAErB,MAAAA,IACvCkC,EACTA,EAAIf,QAlY2B,yBAkYWnB,GACf,oBAAXa,QAChBsC,QAAQC,IAAI,uCAgD8DX,GACxE4D,EAAmCnH,EA7CP,CAACc,EAAOsG,KACxC,MACMtD,EAAQjB,GAAOA,EAAG,0BADNF,GAAWA,EAAO,0BAIlCA,EAAO,0BAAkC7B,EAAOsG,GACvCtD,EACTjB,EAAG,0BAAkCV,YAAY,CAAErB,MAAAA,EAAOsG,QAAAA,IACjDpE,EACTA,EAAIf,QAhZ8B,4BAgZWnB,EAAO,CAAEsG,QAAAA,IAC3B,oBAAXzF,QAChBsC,QAAQC,IAAI,0CAkCoEX,GAEpF,MAAO,CACL8D,QAASC,OG9lBc,UH+lBvBC,gBAAiBjC,EACjB3B,OAAQD,EACRW,QAASD,EACToD,MAAO,IAAM9D,EAAcjB,EAAe+E,OAC1CC,SAAU,IAAM/D,EAAcjB,EAAegF,UAC7CC,YAAa,IAAMhE,EAAcjB,EAAeiF,aAChDC,OAAQ9C,EACR+C,MAAO9C,EACP+C,WAAY9C,EACZ+C,eAAiBC,GAAerE,EAAcjB,EAAeqF,eAAgB,CAAEC,GAAAA,IAC/EC,cAAehD,EACfiD,oBA5L0B,IAAMvE,EAAcjB,EAAewF,qBA6L7DC,qBA3L2B,IAAMxE,EAAcjB,EAAeyF,sBA4L9DC,aAAclD,EACdmD,iBAAkBlD,EAClBmD,SAAUhD,EACViD,MAAOnD,EACPoD,WAAYhD,EACZiD,UAAWzC,EACX0C,gBAhMuBC,IACL/F,GAAWA,EAAO,iBACtBE,GAAOA,EAAG,iBAEEG,EACvBrB,OAAegH,kBAAoBD,EACT,oBAAX/G,QAChBsC,QAAQC,IAAI,gCA0Ld0E,oBAtL2BF,IACT/F,GAAWA,EAAO,qBACtBE,GAAOA,EAAG,qBAEEG,EACvBrB,OAAekH,sBAAwBH,EACb,oBAAX/G,QAChBsC,QAAQC,IAAI,oCAgLd4E,QAAS9C,EACT+C,YArJkB,KAClB,MAAMC,EAASnG,GAAQlB,OAAemB,OAAOC,gBAAgBY,OAC7D,OAAOsF,QAAQtG,GAAWqG,GAAUhG,IAoJpCkG,SAhJgBjJ,GACf0C,GAAsC,mBAApBA,EAAQ1C,IAC1B4C,GAAOA,EAAI5C,IAA8C,mBAA5B4C,EAAI5C,GAAQkC,aACzCa,GAA8B,mBAAhBA,EAAI/C,GA8InBsD,IAAAA,EACA4F,oBAAqBzC,EACrB0C,qBAAsBzC,EACtB0C,mBAAoBzC,EACpB0C,8BAtHqCZ,IACnB/F,GAAWA,EAAO,+BACtBE,GAAOA,EAAG,+BAEEG,EACvBrB,OAAe4H,gCAAkCb,EACvB,oBAAX/G,QAChBsC,QAAQC,IAAI,8CAgHdsF,uBAAwBxC,EACxByC,uBAAwBvC,EACxBwC,0BAA2BvC,EAC3BwC,iCAlEwCjB,IACtB/F,GAAWA,EAAO,kCACtBE,GAAOA,EAAG,kCAEEG,EACvBrB,OAAeiI,2BAA6BlB,EAClB,oBAAX/G,QAChBsC,QAAQC,IAAI,mDA+DH2F"}