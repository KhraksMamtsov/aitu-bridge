{"version":3,"file":"index.modern.js","sources":["../src/utils.ts","../src/webBridge.ts","../src/index.ts","../src/version.ts"],"sourcesContent":["function createCounter(prefix = 'm:') {\n    return {\n        current: 0,\n        next() {\n            return prefix + ++this.current;\n        },\n    };\n}\n\nfunction createRequestResolver(prefix: string) {\n    type PromiseController = {\n        resolve: (value: any) => any;\n        reject: (reason: any) => any;\n    };\n\n    const counter = createCounter(prefix);\n    const promiseControllers: Record<string, PromiseController | null> = {};\n\n    return {\n        add(controller: PromiseController, customId = ''): number | string {\n            const id = customId + counter.next()\n            promiseControllers[id] = controller;\n            return id;\n        },\n\n        resolve<T>(reqId: number | string, data: T, isSuccess: (data: T) => boolean, error: any) {\n            const requestPromise = promiseControllers[reqId];\n\n            if (requestPromise) {\n                if (isSuccess(error)) {\n                    requestPromise.resolve(data);\n                } else {\n                    requestPromise.reject(error);\n                }\n\n                promiseControllers[reqId] = null;\n            }\n        },\n    };\n}\n\nfunction handleSubscribe(subscribe: (handler: (event: any) => void) => void, requestResolver: ReturnType<typeof createRequestResolver>) {\n    subscribe(event => {\n        if (!event.detail) {\n            return;\n        }\n\n        if ('reqId' in event.detail) {\n            const { reqId, data, error } = event.detail;\n\n            if (reqId) {\n                requestResolver.resolve(reqId, data, (error) => !(error), error);\n            }\n        }\n    })\n}\n\nexport function promisifyStorage(storage, subscribe: (fn: any) => void) {\n    const requestResolver = createRequestResolver('storage:');\n\n    handleSubscribe(subscribe, requestResolver)\n\n    return {\n        setItem: (keyName: string, keyValue: string): Promise<void> => {\n            return new Promise((resolve, reject) => {\n                const reqId = requestResolver.add({ resolve, reject });\n                storage(reqId, 'setItem', { keyName, keyValue });\n            });\n        },\n        getItem: (keyName: string): Promise<string | null> => {\n            return new Promise((resolve, reject) => {\n                const reqId = requestResolver.add({ resolve, reject });\n                storage(reqId, 'getItem', { keyName });\n            });\n        },\n        clear: (): Promise<void> => {\n            return new Promise((resolve, reject) => {\n                const reqId = requestResolver.add({ resolve, reject });\n                storage(reqId, 'clear', {});\n            });\n        },\n    }\n}\n\nexport function promisifyInvoke(invoke, subscribe: (fn: any) => void) {\n    const requestResolver = createRequestResolver('invoke:');\n\n    handleSubscribe(subscribe, requestResolver)\n\n    return function promisifiedFunc(invokeMethodName: string, props: any = {}): Promise<any | void> {\n        return new Promise((resolve, reject) => {\n            const reqId = requestResolver.add({ resolve, reject }, invokeMethodName + ':');\n\n            invoke(reqId, invokeMethodName, props);\n        });\n    };\n}\n\nexport function promisifyMethod(method: Function, methodName: string, subscribe: (fn: any) => void) {\n    const requestResolver = createRequestResolver(methodName + ':');\n\n    handleSubscribe(subscribe, requestResolver)\n\n    return function promisifiedFunc(...args: any[]): Promise<any | void> {\n        return new Promise((resolve, reject) => {\n            const reqId = requestResolver.add({ resolve, reject });\n            method(reqId, ...args);\n        });\n    };\n}\n\n\n\n","import type { AituBridge } from './index';\n\nconst AITU_DOMAIN_PARAM = '__aitu-domain'\n\nconst searchParams = new URLSearchParams(window.location.search)\n\nconst aituOrigin = searchParams.get(AITU_DOMAIN_PARAM)\n\ninterface WebBridge {\n    execute(method: keyof AituBridge, reqId: string, ...payload: any[] ): void\n    origin: string\n}\n\nlet WebBridge: WebBridge | null = null\n\nif (aituOrigin) {\n    WebBridge = {\n        origin: aituOrigin,\n        execute: (method, reqId, ...payload) => {\n            window.top.postMessage({\n                    source: 'aitu-bridge',\n                    method,\n                    reqId,\n                    payload: [...payload],\n                },\n                WebBridge.origin\n            )\n    }\n\n    }\n\n    window.addEventListener('message', event => {\n        if (event.origin === aituOrigin && event.data) {\n            window.dispatchEvent(new CustomEvent('aituEvents', { detail: event.data }));\n        }\n    })\n}\n\nexport default WebBridge\n","import { LIB_VERSION } from './version';\n\nimport {\n  promisifyMethod,\n  promisifyStorage,\n  promisifyInvoke,\n} from './utils'\n\n/* eslint-disable */\nconsole.log(\n    '%c'+new Date().toISOString().slice(11)+'%c LOCAL BRIDGE %c HELLO!',\n    'color: white; font-weight: bold; background: BlueViolet',\n    'color: magenta',\n    'color: lime',\n)\n\nimport WebBridge from './webBridge';\n\nenum EInvokeRequest {\n  getMe = 'GetMe',\n  getPhone = 'GetPhone',\n  getContacts = 'GetContacts',\n  getUserProfile = 'GetUserProfile',\n  enableNotifications = 'AllowNotifications',\n  disableNotifications = 'DisableNotifications'\n}\n\ntype SetItemType = (keyName: string, keyValue: string) => Promise<void>;\ntype GetItemType = (keyName: string) => Promise<string | null>;\ntype ClearType = () => Promise<void>;\n\ntype HeaderMenuItemClickHandlerType = (id: string) => Promise<void>;\ntype BackArrowClickHandlerType = () => Promise<void>;\n\ninterface GetPhoneResponse {\n  phone: string;\n  sign: string;\n}\n\ninterface GetMeResponse {\n  name: string;\n  lastname: string;\n  id: string;\n  avatar?: string;\n  avatarThumb?: string;\n  sign: string;\n}\n\ninterface ResponseObject {\n  phone?: string;\n  name?: string;\n  lastname?: string;\n}\n\ninterface GetGeoResponse {\n  latitude: number;\n  longitude: number;\n}\n\ninterface GetContactsResponse {\n  contacts: Array<{\n    first_name: string;\n    last_name: string;\n    phone: string;\n  }>;\n  sign: string;\n}\n\ninterface SelectContactResponse {\n  phone: string;\n  name: string;\n  lastname: string;\n}\n\ninterface GetUserProfileResponse {\n  name: string;\n  lastname?: string;\n  phone?: string;\n  avatar?: string;\n  avatarThumb?: string;\n}\n\nconst MAX_HEADER_MENU_ITEMS_COUNT = 3;\n\nexport enum HeaderMenuIcon {\n  Search = \"Search\",\n  ShoppingCart = \"ShoppingCart\",\n  Menu = \"Menu\",\n  Share = \"Share\",\n  Notifications = \"Notifications\",\n  Help = \"Help\",\n  Error = \"Error\",\n  Person = \"Person\",\n  Sort = \"Sort\",\n  Filter = \"Filter\"\n}\n\ninterface HeaderMenuItem {\n  id: string;\n  icon: HeaderMenuIcon;\n  badge?: string;\n}\n\ntype OpenSettingsResponse = 'success' | 'failed';\ntype ShareResponse = 'success' | 'failed';\ntype CopyToClipboardResponse = 'success' | 'failed';\ntype VibrateResponse = 'success' | 'failed';\n// todo: remove duplicates\ntype ResponseType = 'success' | 'failed';\n\ntype BridgeInvoke<T extends EInvokeRequest, R> = (method: T, data?: {}) => Promise<R>;\n\ninterface BridgeStorage {\n  setItem: SetItemType,\n  getItem: GetItemType,\n  clear: ClearType\n}\n\nexport interface AituBridge {\n  version: string;\n  invoke: BridgeInvoke<EInvokeRequest, ResponseObject>;\n  storage: BridgeStorage;\n  getMe: () => Promise<GetMeResponse>;\n  getPhone: () => Promise<GetPhoneResponse>;\n  getContacts: () => Promise<GetContactsResponse>;\n  getGeo: () => Promise<GetGeoResponse>;\n  selectContact: () => Promise<SelectContactResponse>;\n  getQr: () => Promise<string>;\n  getSMSCode: () => Promise<string>;\n  getUserProfile: (userId: string) => Promise<GetUserProfileResponse>;\n  share: (text: string) => Promise<ShareResponse>;\n  setTitle: (text: string) => Promise<ResponseType>;\n  copyToClipboard: (text: string) => Promise<CopyToClipboardResponse>;\n  shareImage: (text: string, image: string) => Promise<ShareResponse>;\n  shareFile: (text: string, filename: string, base64Data: string) => Promise<ShareResponse>;\n  enableNotifications: () => Promise<{}>;\n  disableNotifications: () => Promise<{}>;\n  openSettings: () => Promise<OpenSettingsResponse>;\n  closeApplication: () => Promise<ResponseType>;\n  setShakeHandler: (handler: any) => void;\n  setTabActiveHandler: (handler: (tabname: string) => void) => void;\n  vibrate: (pattern: number[]) => Promise<VibratePattern>;\n  isSupported: () => boolean;\n  supports: (method: string) => boolean;\n  sub: any;\n  enableScreenCapture: () => Promise<{}>;\n  disableScreenCapture: () => Promise<{}>;\n  setHeaderMenuItems: (items: Array<HeaderMenuItem>) => Promise<ResponseType>;\n  setHeaderMenuItemClickHandler: (handler: HeaderMenuItemClickHandlerType) => void;\n  setCustomBackArrowMode: (enabled: boolean) => Promise<ResponseType>;\n  getCustomBackArrowMode: () => Promise<boolean>;\n  setCustomBackArrowVisible: (visible: boolean) => Promise<ResponseType>;\n  setCustomBackArrowOnClickHandler: (handler: BackArrowClickHandlerType) => void;\n}\n\nconst invokeMethod = 'invoke';\nconst storageMethod = 'storage';\nconst getGeoMethod = 'getGeo';\nconst getQrMethod = 'getQr';\nconst getSMSCodeMethod = 'getSMSCode';\nconst selectContactMethod = 'selectContact';\nconst openSettingsMethod = 'openSettings';\nconst closeApplicationMethod = 'closeApplication';\nconst shareMethod = 'share';\nconst setTitleMethod = 'setTitle';\nconst copyToClipboardMethod = 'copyToClipboard';\nconst shareImageMethod = 'shareImage';\nconst shareFileMethod = 'shareFile';\nconst setShakeHandlerMethod = 'setShakeHandler';\nconst vibrateMethod = 'vibrate';\nconst enableScreenCaptureMethod = 'enableScreenCapture';\nconst disableScreenCaptureMethod = 'disableScreenCapture';\nconst setTabActiveHandlerMethod = 'setTabActiveHandler';\nconst setHeaderMenuItemsMethod = 'setHeaderMenuItems';\nconst setHeaderMenuItemClickHandlerMethod = 'setHeaderMenuItemClickHandler';\nconst setCustomBackArrowModeMethod = 'setCustomBackArrowMode';\nconst getCustomBackArrowModeMethod = 'getCustomBackArrowMode';\nconst setCustomBackArrowVisibleMethod = 'setCustomBackArrowVisible';\nconst setCustomBackArrowOnClickHandlerMethod = 'setCustomBackArrowOnClickHandler';\n\nconst android = typeof window !== 'undefined' && (window as any).AndroidBridge;\nconst ios = typeof window !== 'undefined' && (window as any).webkit && (window as any).webkit.messageHandlers;\nconst web = typeof window !== 'undefined' && (window.top !== window) && WebBridge;\n\nconst buildBridge = (): AituBridge => {\n  const subs = [];\n\n  if (typeof window !== 'undefined') {\n    window.addEventListener('aituEvents', (e: any) => {\n      [...subs].map((fn) => fn.call(null, e));\n    })\n  }\n\n  const invoke = (reqId, method, data = {}) => {\n    const isAndroid = android && android[invokeMethod];\n    const isIos = ios && ios[invokeMethod];\n\n    if (isAndroid) {\n      android[invokeMethod](reqId, method, JSON.stringify(data));\n    } else if (isIos) {\n      ios[invokeMethod].postMessage({ reqId, method, data });\n    } else if (web) {\n      web.execute(invokeMethod, reqId, method, data)\n    } else if (typeof window !== 'undefined') {\n      console.log('--invoke-isUnknown');\n    }\n  };\n\n  const storage = (reqId, method, data = {}) => {\n    const isAndroid = android && android[storageMethod];\n    const isIos = ios && ios[storageMethod];\n\n    if (isAndroid) {\n      android[storageMethod](reqId, method, JSON.stringify(data));\n    } else if (isIos) {\n      ios[storageMethod].postMessage({ reqId, method, data });\n    } else if (web) {\n      web.execute(storageMethod, reqId, method, data);\n    } else if (typeof window !== 'undefined') {\n      console.log('--storage-isUnknown');\n    }\n  }\n\n  const getGeo = (reqId) => {\n    const isAndroid = android && android[getGeoMethod];\n    const isIos = ios && ios[getGeoMethod];\n\n    if (isAndroid) {\n      android[getGeoMethod](reqId);\n    } else if (isIos) {\n      ios[getGeoMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(getGeoMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--getGeo-isUnknown');\n    }\n  }\n\n  const getQr = (reqId) => {\n    const isAndroid = android && android[getQrMethod];\n    const isIos = ios && ios[getQrMethod];\n\n    if (isAndroid) {\n      android[getQrMethod](reqId);\n    } else if (isIos) {\n      ios[getQrMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(getQrMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--getQr-isUnknown');\n    }\n  }\n\n  const getSMSCode = (reqId) => {\n    const isAndroid = android && android[getSMSCodeMethod];\n    const isIos = ios && ios[getSMSCodeMethod];\n\n    if (isAndroid) {\n      android[getSMSCodeMethod](reqId);\n    } else if (isIos) {\n      ios[getSMSCodeMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(getSMSCodeMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--getSMSCode-isUnknown');\n    }\n  }\n\n  const selectContact = (reqId) => {\n    const isAndroid = android && android[selectContactMethod];\n    const isIos = ios && ios[selectContactMethod];\n\n    if (isAndroid) {\n      android[selectContactMethod](reqId);\n    } else if (isIos) {\n      ios[selectContactMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(selectContactMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--selectContact-isUnknown');\n    }\n  }\n\n  const openSettings = (reqId) => {\n    const isAndroid = android && android[openSettingsMethod];\n    const isIos = ios && ios[openSettingsMethod];\n\n    if (isAndroid) {\n      android[openSettingsMethod](reqId);\n    } else if (isIos) {\n      ios[openSettingsMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(openSettingsMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--openSettings-isUnknown');\n    }\n  }\n\n  const closeApplication = (reqId) => {\n    const isAndroid = android && android[closeApplicationMethod];\n    const isIos = ios && ios[closeApplicationMethod];\n\n    if (isAndroid) {\n      android[closeApplicationMethod](reqId);\n    } else if (isIos) {\n      ios[closeApplicationMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(closeApplicationMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--closeApplication-isUnknown');\n    }\n  }\n\n  const share = (reqId, text) => {\n    const isAndroid = android && android[shareMethod];\n    const isIos = ios && ios[shareMethod];\n\n    if (isAndroid) {\n      android[shareMethod](reqId, text);\n    } else if (isIos) {\n      ios[shareMethod].postMessage({ reqId, text });\n    } else if (web) {\n      web.execute(shareMethod, reqId, text);\n    } else if (typeof window !== 'undefined') {\n      console.log('--share-isUnknown');\n    }\n  }\n\n  const setTitle = (reqId, text) => {\n    const isAndroid = android && android[setTitleMethod];\n    const isIos = ios && ios[setTitleMethod];\n\n    if (isAndroid) {\n      android[setTitleMethod](reqId, text);\n    } else if (isIos) {\n      ios[setTitleMethod].postMessage({ reqId, text });\n    } else if (web) {\n      web.execute(setTitleMethod, reqId, text);\n    } else if (typeof window !== 'undefined') {\n      console.log('--setTitle-isUnknown');\n    }\n  }\n\n  const copyToClipboard = (reqId, text) => {\n    const isAndroid = android && android[copyToClipboardMethod];\n    const isIos = ios && ios[copyToClipboardMethod];\n\n    if (isAndroid) {\n      android[copyToClipboardMethod](reqId, text);\n    } else if (isIos) {\n      ios[copyToClipboardMethod].postMessage({ reqId, text });\n    } else if (web) {\n      web.execute(copyToClipboardMethod, reqId, text);\n    } else if (typeof window !== 'undefined') {\n      console.log('--copyToClipboard-isUnknown');\n    }\n  }\n\n  const enableScreenCapture = (reqId) => {\n    const isAndroid = android && android[enableScreenCaptureMethod];\n    const isIos = ios && ios[enableScreenCaptureMethod];\n\n    if (isAndroid) {\n      android[enableScreenCaptureMethod](reqId);\n    } else if (isIos) {\n      ios[enableScreenCaptureMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(enableScreenCaptureMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--enableScreenCapture-isUnknown');\n    }\n  }\n\n  const disableScreenCapture = (reqId) => {\n    const isAndroid = android && android[disableScreenCaptureMethod];\n    const isIos = ios && ios[disableScreenCaptureMethod];\n\n    if (isAndroid) {\n      android[disableScreenCaptureMethod](reqId);\n    } else if (isIos) {\n      ios[disableScreenCaptureMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(disableScreenCaptureMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--disableScreenCapture-isUnknown');\n    }\n  }\n\n  const shareImage = (reqId, text, image) => {\n    // !!!======================!!!\n    // !!!===== Deprecated =====!!!\n    // !!!======================!!!\n\n    // const isAndroid = android && android[shareImageMethod];\n    // const isIos = ios && ios[shareImageMethod];\n\n    // if (isAndroid) {\n    //   android[shareImageMethod](reqId, text, image);\n    // } else if (isIos) {\n    //   ios[shareImageMethod].postMessage({ reqId, text, image });\n    // } else if (typeof window !== 'undefined') {\n    //   console.log('--shareImage-isWeb');\n    // }\n\n    // new one - fallback to shareFile\n    const isAndroid = android && android[shareFileMethod];\n    const isIos = ios && ios[shareFileMethod];\n\n    // get extension from base64 mime type and merge with name\n    const ext = image.split(';')[0].split('/')[1];\n    const filename = 'image.' + ext;\n    // remove mime type\n    const base64Data = image.substr(image.indexOf(',') + 1);\n\n    if (isAndroid) {\n      android[shareFileMethod](reqId, text, filename, base64Data);\n    } else if (isIos) {\n      ios[shareFileMethod].postMessage({ reqId, text, filename, base64Data });\n    } else if (web) {\n      web.execute(shareFileMethod, reqId, { text, filename, base64Data });\n    } else if (typeof window !== 'undefined') {\n      console.log('--shareFile-isUnknown');\n    }\n  }\n\n  const shareFile = (reqId, text, filename, base64Data) => {\n    const isAndroid = android && android[shareFileMethod];\n    const isIos = ios && ios[shareFileMethod];\n\n    if (isAndroid) {\n      android[shareFileMethod](reqId, text, filename, base64Data);\n    } else if (isIos) {\n      ios[shareFileMethod].postMessage({ reqId, text, filename, base64Data });\n    } else if (web) {\n      web.execute(shareFileMethod, reqId, text, filename, base64Data);\n    } else if (typeof window !== 'undefined') {\n      console.log('--shareFile-isUnknown');\n    }\n  }\n\n  const enableNotifications = () => invokePromise(EInvokeRequest.enableNotifications);\n\n  const disableNotifications = () => invokePromise(EInvokeRequest.disableNotifications);\n\n  const setShakeHandler = (handler) => {\n    const isAndroid = android && android[setShakeHandlerMethod];\n    const isIos = ios && ios[setShakeHandlerMethod];\n\n    if (isAndroid || isIos || web) {\n      (window as any).onAituBridgeShake = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setShakeHandler-isUnknown');\n    }\n  };\n\n  const setTabActiveHandler = (handler: (tabname: string) => void) => {\n    const isAndroid = android && android[setTabActiveHandlerMethod];\n    const isIos = ios && ios[setTabActiveHandlerMethod];\n\n    if (isAndroid || isIos || web) {\n      (window as any).onAituBridgeTabActive = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setTabActiveHandler-isUnknown');\n    }\n  };\n\n  const vibrate = (reqId, pattern) => {\n    if (\n      !Array.isArray(pattern) ||\n      pattern.some((timing) => timing < 1 || timing !== Math.floor(timing)) ||\n      pattern.reduce((total, timing) => total + timing) > 10000\n    ) {\n      console.error('Pattern should be an array of positive integers no longer than 10000ms total');\n      return;\n    }\n\n    const isAndroid = android && android[vibrateMethod];\n    const isIos = ios && ios[vibrateMethod];\n\n    if (isAndroid) {\n      android[vibrateMethod](reqId, JSON.stringify(pattern));\n    } else if (isIos) {\n      ios[vibrateMethod].postMessage({ reqId, pattern });\n    }  else if (web) {\n      web.execute(vibrateMethod, reqId, pattern);\n    } else if (typeof window !== 'undefined') {\n      console.log('--vibrate-isUnknown');\n    }\n  }\n\n  const isSupported = () => {\n    const iosSup = ios && (window as any).webkit.messageHandlers.invoke;\n    return Boolean(android || iosSup || web);\n  }\n\n  // TODO: implement web support\n  const supports = (method) =>\n    (android && typeof android[method] === 'function') ||\n    (ios && ios[method] && typeof ios[method].postMessage === 'function') ||\n    (web && typeof web[method] === 'function');\n\n  const sub = (listener: any) => {\n    subs.push(listener);\n  }\n\n  const setHeaderMenuItems = (reqId, items: Array<HeaderMenuItem>) => {\n    if (items.length > MAX_HEADER_MENU_ITEMS_COUNT) {\n      console.error('SetHeaderMenuItems: items count should not be more than ' + MAX_HEADER_MENU_ITEMS_COUNT);\n      return;\n    }\n\n    const isAndroid = android && android[setHeaderMenuItemsMethod];\n    const isIos = ios && ios[setHeaderMenuItemsMethod];\n\n    const itemsJsonArray = JSON.stringify(items);\n\n    if (isAndroid) {\n      android[setHeaderMenuItemsMethod](reqId, itemsJsonArray);\n    } else if (isIos) {\n      ios[setHeaderMenuItemsMethod].postMessage({ reqId, itemsJsonArray });\n    } else if (web) {\n      web.execute(setHeaderMenuItemsMethod, reqId, itemsJsonArray);\n    } else if (typeof window !== 'undefined') {\n      console.log('--setHeaderMenuItems-isUnknown');\n    }\n  }\n\n  const setHeaderMenuItemClickHandler = (handler: HeaderMenuItemClickHandlerType) => {\n    const isAndroid = android && android[setHeaderMenuItemClickHandlerMethod];\n    const isIos = ios && ios[setHeaderMenuItemClickHandlerMethod];\n\n    if (isAndroid || isIos || web) {\n      (window as any).onAituBridgeHeaderMenuItemClick = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setHeaderMenuItemClickHandler-isUnknown');\n    }\n  }\n\n  const setCustomBackArrowMode = (reqId, enabled: boolean) => {\n    const isAndroid = android && android[setCustomBackArrowModeMethod];\n    const isIos = ios && ios[setCustomBackArrowModeMethod];\n\n    if (isAndroid) {\n      android[setCustomBackArrowModeMethod](reqId, enabled);\n    } else if (isIos) {\n      ios[setCustomBackArrowModeMethod].postMessage({ reqId, enabled });\n    } else if (web) {\n      web.execute(setCustomBackArrowModeMethod, reqId, enabled);\n    } else if (typeof window !== 'undefined') {\n      console.log('--setCustomBackArrowMode-isUnknown');\n    }\n  }\n\n  const getCustomBackArrowMode = (reqId) => {\n    const isAndroid = android && android[getCustomBackArrowModeMethod];\n    const isIos = ios && ios[getCustomBackArrowModeMethod];\n\n    if (isAndroid) {\n      android[getCustomBackArrowModeMethod](reqId);\n    } else if (isIos) {\n      ios[getCustomBackArrowModeMethod].postMessage({ reqId });\n    } else if (web) {\n      web.execute(getCustomBackArrowModeMethod, reqId);\n    } else if (typeof window !== 'undefined') {\n      console.log('--getCustomBackArrowMode-isUnknown');\n    }\n  }\n\n  const setCustomBackArrowVisible = (reqId, visible: boolean) => {\n    const isAndroid = android && android[setCustomBackArrowVisibleMethod];\n    const isIos = ios && ios[setCustomBackArrowVisibleMethod];\n\n    if (isAndroid) {\n      android[setCustomBackArrowVisibleMethod](reqId, visible);\n    } else if (isIos) {\n      ios[setCustomBackArrowVisibleMethod].postMessage({ reqId, visible });\n    } else if (web) {\n      web.execute(setCustomBackArrowVisibleMethod, reqId, visible);\n    } else if (typeof window !== 'undefined') {\n      console.log('--setCustomBackArrowVisible-isUnknown');\n    }\n  }\n\n  const setCustomBackArrowOnClickHandler = (handler: BackArrowClickHandlerType) => {\n    const isAndroid = android && android[setCustomBackArrowOnClickHandlerMethod];\n    const isIos = ios && ios[setCustomBackArrowOnClickHandlerMethod];\n\n    if (isAndroid || isIos || web) {\n      (window as any).onAituBridgeBackArrowClick = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setCustomBackArrowOnClickHandler-isUnknown');\n    }\n  }\n\n  const invokePromise = promisifyInvoke(invoke, sub);\n  const storagePromise = promisifyStorage(storage, sub);\n  const getGeoPromise = promisifyMethod(getGeo, getGeoMethod, sub);\n  const getQrPromise = promisifyMethod(getQr, getQrMethod, sub);\n  const getSMSCodePromise = promisifyMethod(getSMSCode, getSMSCodeMethod, sub);\n  const selectContactPromise = promisifyMethod(selectContact, selectContactMethod, sub);\n  const openSettingsPromise = promisifyMethod(openSettings, openSettingsMethod, sub);\n  const closeApplicationPromise = promisifyMethod(closeApplication, closeApplicationMethod, sub);\n  const sharePromise = promisifyMethod(share, shareMethod, sub);\n  const setTitlePromise = promisifyMethod(setTitle, setTitleMethod, sub);\n  const copyToClipboardPromise = promisifyMethod(copyToClipboard, copyToClipboardMethod, sub);\n  const shareImagePromise = promisifyMethod(shareImage, shareImageMethod, sub);\n  const shareFilePromise = promisifyMethod(shareFile, shareFileMethod, sub);\n  const vibratePromise = promisifyMethod(vibrate, vibrateMethod, sub);\n  const enableScreenCapturePromise = promisifyMethod(enableScreenCapture, enableScreenCaptureMethod, sub);\n  const disableScreenCapturePromise = promisifyMethod(disableScreenCapture, disableScreenCaptureMethod, sub);\n  const setHeaderMenuItemsPromise = promisifyMethod(setHeaderMenuItems, setHeaderMenuItemsMethod, sub);\n  const setCustomBackArrowModePromise = promisifyMethod(setCustomBackArrowMode, setCustomBackArrowModeMethod, sub);\n  const getCustomBackArrowModePromise = promisifyMethod(getCustomBackArrowMode, getCustomBackArrowModeMethod, sub);\n  const setCustomBackArrowVisiblePromise = promisifyMethod(setCustomBackArrowVisible,setCustomBackArrowVisibleMethod, sub);\n\n  return {\n    version: String(LIB_VERSION),\n    copyToClipboard: copyToClipboardPromise,\n    invoke: invokePromise,\n    storage: storagePromise,\n    getMe: () => invokePromise(EInvokeRequest.getMe),\n    getPhone: () => invokePromise(EInvokeRequest.getPhone),\n    getContacts: () => invokePromise(EInvokeRequest.getContacts),\n    getGeo: getGeoPromise,\n    getQr: getQrPromise,\n    getSMSCode: getSMSCodePromise,\n    getUserProfile: (id: string) => invokePromise(EInvokeRequest.getUserProfile, { id }),\n    selectContact: selectContactPromise,\n    enableNotifications,\n    disableNotifications,\n    openSettings: openSettingsPromise,\n    closeApplication: closeApplicationPromise,\n    setTitle: setTitlePromise,\n    share: sharePromise,\n    shareImage: shareImagePromise,\n    shareFile: shareFilePromise,\n    setShakeHandler,\n    setTabActiveHandler,\n    vibrate: vibratePromise,\n    isSupported,\n    supports,\n    sub,\n    enableScreenCapture: enableScreenCapturePromise,\n    disableScreenCapture: disableScreenCapturePromise,\n    setHeaderMenuItems: setHeaderMenuItemsPromise,\n    setHeaderMenuItemClickHandler,\n    setCustomBackArrowMode: setCustomBackArrowModePromise,\n    getCustomBackArrowMode: getCustomBackArrowModePromise,\n    setCustomBackArrowVisible: setCustomBackArrowVisiblePromise,\n    setCustomBackArrowOnClickHandler,\n  }\n}\n\nconst bridge = buildBridge();\n\nexport default bridge;\n","export const LIB_VERSION = \"0.2.20\";\n"],"names":["createRequestResolver","prefix","counter","current","next","this","createCounter","promiseControllers","add","controller","customId","id","resolve","reqId","data","isSuccess","error","requestPromise","reject","handleSubscribe","subscribe","requestResolver","event","detail","promisifyMethod","method","methodName","args","Promise","aituOrigin","URLSearchParams","window","location","search","get","WebBridge","origin","execute","payload","top","postMessage","source","addEventListener","dispatchEvent","CustomEvent","EInvokeRequest","HeaderMenuIcon","log","Date","toISOString","slice","android","AndroidBridge","ios","webkit","messageHandlers","web","bridge","subs","e","map","fn","call","sub","listener","push","invokePromise","invoke","invokeMethodName","props","isIos","JSON","stringify","console","promisifyInvoke","storagePromise","storage","setItem","keyName","keyValue","getItem","clear","promisifyStorage","getGeoPromise","getQrPromise","getSMSCodePromise","selectContactPromise","openSettingsPromise","closeApplicationPromise","sharePromise","text","setTitlePromise","copyToClipboardPromise","shareImagePromise","image","isAndroid","filename","split","base64Data","substr","indexOf","shareFilePromise","vibratePromise","pattern","Array","isArray","some","timing","Math","floor","reduce","total","enableScreenCapturePromise","disableScreenCapturePromise","setHeaderMenuItemsPromise","items","length","itemsJsonArray","setCustomBackArrowModePromise","enabled","getCustomBackArrowModePromise","setCustomBackArrowVisiblePromise","visible","version","String","copyToClipboard","getMe","getPhone","getContacts","getGeo","getQr","getSMSCode","getUserProfile","selectContact","enableNotifications","disableNotifications","openSettings","closeApplication","setTitle","share","shareImage","shareFile","setShakeHandler","handler","onAituBridgeShake","setTabActiveHandler","onAituBridgeTabActive","vibrate","isSupported","iosSup","Boolean","supports","enableScreenCapture","disableScreenCapture","setHeaderMenuItems","setHeaderMenuItemClickHandler","onAituBridgeHeaderMenuItemClick","setCustomBackArrowMode","getCustomBackArrowMode","setCustomBackArrowVisible","setCustomBackArrowOnClickHandler","onAituBridgeBackArrowClick","buildBridge"],"mappings":"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"}